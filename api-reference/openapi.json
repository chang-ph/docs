{"openapi": "3.1.0", "info": {"title": "Coinfer Server API", "version": "0.0.1.4a7bb05", "description": "\nThis part of document describes the HTTP APIs of the Coinfer cloud.\n\n"}, "paths": {"/base/auth0-config": {"get": {"operationId": "coinfer_apis_base_api_auth0_config", "summary": "Get Auth0 login configuration", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Auth0ConfigRsp_"}}}}}, "description": "Returns the configurations need by the frontend to implement Auth0 login.\nBy using an API to provide this information, we avoid hardcoding them in\nthe frontend code.\n\nThis API doen't need authorization as it is usually called before login.", "tags": ["Authorization"]}}, "/base/auth0-login": {"post": {"operationId": "coinfer_apis_base_api_auth0_login", "summary": "Login with Auth0.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Auth0LoginRsp_"}}}}}, "description": "This API should be called after the user finishes the Auth0 authorization.\nSo the frontend should be able to obtain an Auth0 token at that point. The\nAPI should be called with this token in the `Authorization` header, in the\nformat like `Authorization: Bearer <token>`.\n\nThe API will call an Auth0 API to query user information with the token. If\nit successfully gets it, it means the token is valid. Then the API will\neither:\n\n1. Retrieve the user object within our system\n2. Create a new user within our system\n\ndepending on whether a user with the same identity exists in our system.\n\nIf everything is okay, the API will return a token which can then be used\nas an identification to call other APIs. The return format is intentionally\ndesigned to keep the same as password login API.", "tags": ["Authorization"]}}, "/base/login": {"post": {"operationId": "coinfer_apis_base_api_user_login", "summary": "Login with password.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_UserLoginRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Login in with user name and password.\n\nOn success, the return value of the API will be a token which can then be\nused as an identification to call other APIs.", "tags": ["Authorization"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserLogin"}}}, "required": true}}}, "/base/user": {"get": {"operationId": "coinfer_apis_base_api_user_info", "summary": "Get information of current user.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_UserInfoRsp_"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Returns the information of the current logined user.", "tags": ["Authorization"]}, "put": {"operationId": "coinfer_apis_base_api_modify_current_user", "summary": "Update information of current user.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_UserInfoRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Modify the property of the current logined user. Currently only login\npassword is supported.", "tags": ["Authorization"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifyCurrentUser"}}}, "required": true}, "security": [{"GlobalAuth": []}]}}, "/base/logout": {"post": {"operationId": "coinfer_apis_base_api_user_logout", "summary": "Logout the system.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_NoneType_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Log out of the system.", "tags": ["Authorization"], "security": [{"GlobalAuth": []}]}}, "/base/user/tokens": {"get": {"operationId": "coinfer_apis_base_api_get_tokens", "summary": "List all of current user's tokens.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_list_GetTokensRsp__"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Get the tokens created by the current user.\n\nIn our system, there are two kinds of tokens:\n\n1. Tokens created explicitly by user.\n2. Tokens created implicitly when a user logs in.\n\nThis API only returns the former. The latter should be seen as\nimplementation detail and be invisible to the user.", "tags": ["Authorization"], "security": [{"GlobalAuth": []}]}, "post": {"operationId": "coinfer_apis_base_api_create_token", "summary": "Create a new authorization token.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetTokensRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "This is where the user explicitly creates a new token. The token can be used\nto call other APIs in the name of the user.", "tags": ["Authorization"], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/CreateToken"}, {"type": "null"}]}}}, "required": false}, "security": [{"GlobalAuth": []}]}}, "/base/user/token/{token_id}": {"put": {"operationId": "coinfer_apis_base_api_modify_token", "summary": "Update a token by its ID.", "parameters": [{"in": "path", "name": "token_id", "schema": {"title": "Token Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetTokensRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Modify various property of a token.", "tags": ["Authorization"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModifyToken"}}}, "required": true}, "security": [{"GlobalAuth": []}]}, "delete": {"operationId": "coinfer_apis_base_api_delete_token", "summary": "Delete a token by its ID.", "parameters": [{"in": "path", "name": "token_id", "schema": {"title": "Token Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_NoneType_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Delete(invalidate) a token.", "tags": ["Authorization"], "security": [{"GlobalAuth": []}]}}, "/base/update": {"post": {"operationId": "coinfer_apis_base_api_update", "summary": "Update current user or a token", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Union_UserInfoRsp__GetTokensRsp__"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "This API is multi-functional. It can:\n1. update the data of the current user\n2. update the data of a specific token\n\nBecause of this, it support different set of parameters, discrimated by the \"type\" field:\n\n```js\n{\"payload\": {\"type\": \"update_user\", ...}}\n// or\n{\"payload\": {\"type\": \"update_token\", ...}}\n```", "tags": ["Authorization"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateBase"}}}, "required": true}, "security": [{"GlobalAuth": []}]}}, "/turing/object/{objid}/share/{share_id}": {"get": {"operationId": "coinfer_apis_turing_api_view_shared_model", "summary": "View share snapshot of a model", "parameters": [{"in": "path", "name": "objid", "schema": {"title": "Objid", "type": "string"}, "required": true}, {"in": "path", "name": "share_id", "schema": {"title": "Share Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ViewModelsRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "View the snapshot of a model which is created when creating the share.  The\nsnapshot is assured to remain unchanged even when the model undergoes\nmodifications. This guarantees that discussions regarding shared resources\namong users are grounded in a solid foundation.", "tags": ["Model"], "security": [{"SharingAuth": []}]}}, "/turing/config": {"get": {"operationId": "coinfer_apis_turing_api_get_config", "summary": "Get configuration about how to run a model.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetConfigRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "This API is used to get the configuration about how to run a model. Currently the\nconfiguration includes the URL of the proxy lambda function which is used to\nrun the model.", "tags": ["Model"], "security": [{"GlobalAuth": []}]}}, "/turing/model/{model_id}/share": {"post": {"operationId": "coinfer_apis_turing_api_create_model_share", "summary": "Share a model specified by model ID.", "parameters": [{"in": "path", "name": "model_id", "schema": {"title": "Model Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_CreateModelShareRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Share a model specified by model ID.\n\nCurrently we support three types of sharing:\n\n1. Public sharing: The model is shared publicly. Create a public share by not\nspecifying `target_user` and share password in the request body.\n\n2. User-specific sharing: The model is shared with a specific user. Create a\nuser-specific share by specifying `target_user` in the request body. The\n`target_user` should be in the format of `name(@id)`. This is exactly the\nformat what the user info API returns.\n\n3. Password-protected sharing: The model is shared with a password. Create a\npassword-protected share by specifying `password` in the request body.", "tags": ["Share"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateModelShare"}}}, "required": true}, "security": [{"GlobalAuth": []}]}}, "/turing/model/share/{share_id}": {"delete": {"operationId": "coinfer_apis_turing_api_delete_model_share", "summary": "Delete model shares.", "parameters": [{"in": "path", "name": "share_id", "schema": {"description": "\"-\"separated share ids", "title": "Share Id", "type": "string"}, "required": true, "description": "\"-\"separated share ids"}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_NoneType_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "\n    ", "tags": ["Share"], "security": [{"GlobalAuth": []}]}, "get": {"operationId": "coinfer_apis_turing_api_get_model_share", "summary": "Get basic share information of a model sharing.", "parameters": [{"in": "path", "name": "share_id", "schema": {"title": "Share Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetModelShareRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Returns very basic share information without\nauthorization. Currently it only returns one field\n`require_password`, which is used when opening a share URL. If\n`require_password` is true, then a password input box is\nopen. Else the page should be directly displayed.", "tags": ["Share"]}}, "/turing/github/repository": {"get": {"operationId": "coinfer_apis_turing_api_list_repository", "summary": "List repositories and gists.", "parameters": [{"in": "query", "name": "page_no", "schema": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "required": false, "description": "page number"}, {"in": "query", "name": "page_size", "schema": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}, "required": false, "description": "page size"}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ListRepositoryRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "List repositories and gists of the current (GitHub) user.\n\nOf course this API can only be used when the user is login using the GitHub account.\n\nThe return value contains two parts:\n1. List of repositories names.\n2. List of gists. As the description field can't uniquely identify a gist,\nthe id field is also returned. In practice, the description field should be\nshowed to user for them to select the gist, the ID field should be used to\nspecify a gist.", "tags": ["Model"], "security": [{"GlobalAuth": []}]}}, "/turing/github/branch": {"get": {"operationId": "coinfer_apis_turing_api_list_branch", "summary": "List branches.", "parameters": [{"in": "query", "name": "repo", "schema": {"title": "Repo", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ListBranchRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "List branches of the specified repository.", "tags": ["Model"], "security": [{"GlobalAuth": []}]}}, "/mcmc/object/{objid}/cloudwatch-logs": {"get": {"operationId": "coinfer_apis_mcmc_api_view_xp_cloudwatch_logs", "summary": "Get Cloudwatch logs", "parameters": [{"in": "path", "name": "objid", "schema": {"title": "Objid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ViewCloudwatchLogsRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "As logs may contain sensetive info, this api can only be used by admin", "tags": ["Experiment"], "security": [{"GlobalAuth": []}]}}, "/mcmc/experiment/{experiment_id}/sampledata/{fmt}": {"get": {"operationId": "coinfer_apis_mcmc_api_get_sample_data", "summary": "Get sample data", "parameters": [{"in": "path", "name": "experiment_id", "schema": {"title": "Experiment Id", "type": "string"}, "required": true}, {"in": "path", "name": "fmt", "schema": {"enum": ["csv", "grist"], "title": "Fmt", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetSampleDataRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "It takes time for the system to build the sample data file.\n\nIf the sample data file not ready yet, the API will return with the\n`progress` field set to `generating` and the sample data file is then\ngenerating in the background by the system. You may need to call this API\nlater to see if the sample data is ready.\n\nIf it is ready, the API will return with the `progress` field set to `done`\nand the `url` field is the presigned URL of the sample data file.", "tags": ["Experiment"], "security": [{"SharingAuth": []}]}}, "/mcmc/experiment/{expid}/notebook": {"get": {"operationId": "coinfer_apis_mcmc_api_experiment_notebook", "summary": "Download a notebook which can be used to load and visualize the experiment result", "parameters": [{"in": "path", "name": "expid", "schema": {"title": "Expid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Any_"}}}}}, "tags": ["Experiment"], "security": [{"GlobalAuth": []}]}}, "/mcmc/experiment/{expid}/notebook/colab": {"get": {"operationId": "coinfer_apis_mcmc_api_experiment_notebook_colab", "summary": "Get a link of the notebook in Colab", "parameters": [{"in": "path", "name": "expid", "schema": {"title": "Expid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Any_"}}}}}, "description": "Create notebook which can be used to load and visualize the experiment result.\nSave it to Github and returns a link which can be used to open this notebook in Google Colab", "tags": ["Experiment"], "security": [{"GlobalAuth": []}]}}, "/api/notification": {"get": {"operationId": "coinfer_apis_notification_api_get_notification", "summary": "Get notification messsages", "parameters": [{"in": "query", "name": "page_no", "schema": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "required": false, "description": "page number"}, {"in": "query", "name": "page_size", "schema": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}, "required": false, "description": "page size"}, {"in": "query", "name": "status", "schema": {"description": "Filter the notification message by read status", "enum": ["all", "read", "unread"], "title": "Status", "type": "string"}, "required": true, "description": "Filter the notification message by read status"}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ListingRspData_NotificationDict__"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Get notification messages targeting the current user.", "tags": ["Notification"], "security": [{"GlobalAuth": []}]}}, "/api/notification/mark": {"post": {"operationId": "coinfer_apis_notification_api_mark_notification_read", "summary": "Mark notification messsage as already read", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_NoneType_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Mark some notification as having been read by user.\nListing messages support filtering by read mark.", "tags": ["Notification"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MarkNotificationReadReq"}}}, "required": true}, "security": [{"GlobalAuth": []}]}}, "/api/object": {"get": {"operationId": "coinfer_apis_unified_api_list_object", "summary": "List objects.", "parameters": [{"in": "query", "name": "page_no", "schema": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "required": false, "description": "page number"}, {"in": "query", "name": "page_size", "schema": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}, "required": false, "description": "page size"}, {"in": "query", "name": "object_type", "schema": {"enum": ["model", "experiment", "share"], "title": "Object Type", "type": "string"}, "required": true}, {"in": "query", "name": "with_share_info", "schema": {"default": false, "description": "Whether to return the related share info", "title": "With Share Info", "type": "boolean"}, "required": false, "description": "Whether to return the related share info"}, {"in": "query", "name": "shared_by_me", "schema": {"default": false, "description": "Filter objects shared by the current user", "title": "Shared By Me", "type": "boolean"}, "required": false, "description": "Filter objects shared by the current user"}, {"in": "query", "name": "shared_with_me", "schema": {"default": false, "description": "Filter objects shared with the current user", "title": "Shared With Me", "type": "boolean"}, "required": false, "description": "Filter objects shared with the current user"}, {"in": "query", "name": "model_ids", "schema": {"items": {"type": "string"}, "title": "Model Ids", "type": "array"}, "required": false}, {"in": "query", "name": "status", "schema": {"default": "", "enum": ["NEW", "RUN", "FIN", "ERR", ""], "title": "Status", "type": "string"}, "required": false}, {"in": "query", "name": "run_on", "schema": {"default": "", "enum": ["Lambda", "Fargate", "Local", ""], "title": "Run On", "type": "string"}, "required": false}, {"in": "query", "name": "has_model", "schema": {"default": "", "enum": ["true", "false", ""], "title": "Has Model", "type": "string"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_ListingRspData_Union_ListExperimentRsp__ListModelsRspItem___"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "### List Objects\n\nBy default, the API returns only objects created by the current user, excluding sharing\ninformation for performance optimization.\n\nWhen `shared_with_me` is enabled, the API returns objects owned by other users but\nshared with the current user, including their sharing details.\n\nEnabling `shared_by_me` will include sharing information for objects that the current\nuser has shared with others.\n\nSetting `with_share_info` to true combines both scenarios: it returns objects shared\nby the current user as well as objects shared with the current user, complete with\ntheir respective sharing information. This effectively merges the functionality of\nboth `shared_by_me` and `shared_with_me`.\n\n### Example\n\nList models:\n```\nGET /api/object?object_type=model\nGET /api/object?object_type=model&shared_by_me=true\nGET /api/object?object_type=model&shared_with_me=true\nGET /api/object?object_type=model&with_share_info=true\n```\n\nList experiments:\n```\nGET /api/object?object_type=experiment\nGET /api/object?object_type=experiment&shared_by_me=true\nGET /api/object?object_type=experiment&shared_with_me=true\nGET /api/object?object_type=experiment&with_share_info=true\n```", "tags": ["Object"], "security": [{"GlobalAuth": []}]}, "post": {"operationId": "coinfer_apis_unified_api_create_object", "summary": "Create new object.", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Union_ExperimentRsp__ListModelsRspItem__CreateExperimentShareRsp__"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Create new object.\n\n### Example\nCreate model:\n```\nPOST /api/object\n{\n    \"payload\": {\n        \"object_type\": \"model\",\n        \"name\": \"model name\",\n        \"type\": \"local\",\n        \"content\": {\n            \"meta\": {\"entrance_file\": \"main.jl\"},\n            \"tree\": [],\n        }\n    }\n}\n```\n\nCreate model from GitHub repo:\n```\nPOST /api/object\n{\n    \"payload\": {\n        \"object_type\": \"model\",\n        \"repo\": \"vectorly-ai/simple-model\",\n        \"branch\": \"main\",\n        \"type\": \"repo\",\n    }\n}\n```\n\nCreate model from GitHub gist:\n```\nPOST /api/object\n{\n    \"payload\": {\n        \"object_type\": \"model\",\n        \"repo\": \"<the-gist-id>\",\n        \"type\": \"gist\",\n    }\n}\n```\n\nCreate experiment:\n```\nPOST /api/object\n{\n    \"payload\": {\n        \"object_type\": \"experiment\",\n        \"name\": \"experiment name\",\n        \"model_id\": \"M1234567\",\n    }\n}\n```\n\nCreate share of experiment:\n```\nPOST /api/object\n{\n    \"payload\": {\n        \"object_type\": \"share\",\n        \"objid\": \"X1234567\",\n        \"password\": \"the-pass\",\n    }\n}\n```", "tags": ["Object"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateObjectReq"}}}, "required": true}, "security": [{"GlobalAuth": []}]}, "delete": {"operationId": "coinfer_apis_unified_api_delete_object", "summary": "Delete objects.", "parameters": [{"in": "query", "name": "objids", "schema": {"items": {"type": "string"}, "title": "Objids", "type": "array"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_NoneType_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Delete objects of certain IDs in batch.\n\n### Example\n\n```\nDELETE /api/object?objids=M1234567&objids=X1234567\n```", "tags": ["Object"], "security": [{"GlobalAuth": []}]}}, "/api/object/{objid}": {"get": {"operationId": "coinfer_apis_unified_api_view_object", "summary": "View object.", "parameters": [{"in": "path", "name": "objid", "schema": {"title": "Objid", "type": "string"}, "required": true}, {"in": "query", "name": "object_type", "schema": {"enum": ["model", "experiment", "share"], "title": "Object Type", "type": "string"}, "required": true}, {"in": "query", "name": "share_id", "schema": {"default": "", "description": "\n                Only appicable to object_type == model or object_type == experiment\n                If this field is empty, returns the latest version of the objects.\n                otherwise returns the specified share snapshot", "title": "Share Id", "type": "string"}, "required": false, "description": "\n                Only appicable to object_type == model or object_type == experiment\n                If this field is empty, returns the latest version of the objects.\n                otherwise returns the specified share snapshot"}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Annotated_Union_ExperimentRsp__ViewModelsRsp__ViewExperimentShareRsp___FieldInfo_annotation_NoneType__required_True__discriminator__object_type____"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "View object of certain ID.\n\n### Example\n\n```\nGET /api/object/M1234567  # view model data\nGET /api/object/X1234567  # view experiment data\nGET /api/object/S1234566  # view share data\n```", "tags": ["Object"], "security": [{"SharingAuth": []}, {"GlobalAuth": []}]}, "post": {"operationId": "coinfer_apis_unified_api_update_object", "summary": "Update object.", "parameters": [{"in": "path", "name": "objid", "schema": {"title": "Objid", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_Union_ExperimentRsp__ViewModelsRsp__"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "description": "Update object of certain ID.\n\n### Example\n\nUpdate model:\n```\nPOST /api/object/M1234567\n\n{\n    \"payload\": {\n        \"object_type\": \"model\",\n        \"name\": \"model name\",\n        \"content\": {\n            \"meta\": {\"entrance_file\": \"main.jl\"},\n            \"tree\": [],\n        }\n    }\n}\n```\n\nUpdate experiment:\n```\nPOST /api/object/X1234567\n\n{\n    \"payload\": {\n        \"object_type\": \"experiment\",\n        \"name\": \"experiment name\",\n    }\n}\n```", "tags": ["Object"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateObject"}}}, "required": true}, "security": [{"GlobalAuth": []}]}}, "/api/object/share/{share_id}": {"get": {"operationId": "coinfer_apis_no_auth_api_get_experiment_share", "summary": "Get sharing information of an experiment.", "parameters": [{"in": "path", "name": "share_id", "schema": {"title": "Share Id", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccRsp_GetExperimentShareRsp_"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrRsp"}}}}}, "tags": ["Share"]}}}, "components": {"schemas": {"Auth0ConfigRsp": {"properties": {"Domain": {"title": "Domain", "type": "string"}, "ClientID": {"title": "Clientid", "type": "string"}}, "required": ["Domain", "ClientID"], "title": "Auth0ConfigRsp", "type": "object"}, "SuccRsp_Auth0ConfigRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/Auth0ConfigRsp"}}, "required": ["status", "data"], "title": "SuccRsp[Auth0ConfigRsp]", "type": "object"}, "Auth0LoginRsp": {"properties": {"tokens": {"items": {"type": "string"}, "title": "Tokens", "type": "array"}}, "required": ["tokens"], "title": "Auth0LoginRsp", "type": "object"}, "SuccRsp_Auth0LoginRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/Auth0LoginRsp"}}, "required": ["status", "data"], "title": "SuccRsp[Auth0LoginRsp]", "type": "object"}, "SuccRsp_UserLoginRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/UserLoginRsp"}}, "required": ["status", "data"], "title": "SuccRsp[UserLoginRsp]", "type": "object"}, "UserLoginRsp": {"properties": {"tokens": {"items": {"type": "string"}, "title": "Tokens", "type": "array"}}, "required": ["tokens"], "title": "UserLoginRsp", "type": "object"}, "ErrRsp": {"properties": {"status": {"const": "error", "title": "Status", "type": "string"}, "code": {"title": "Code", "type": "string"}, "message": {"title": "Message", "type": "string"}}, "required": ["status", "code", "message"], "title": "ErrRsp", "type": "object"}, "UserLogin": {"properties": {"username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}}, "required": ["username", "password"], "title": "UserLogin", "type": "object"}, "SuccRsp_UserInfoRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/UserInfoRsp"}}, "required": ["status", "data"], "title": "SuccRsp[UserInfoRsp]", "type": "object"}, "UserInfoRsp": {"properties": {"id": {"title": "Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "super": {"title": "Super", "type": "boolean"}, "roles": {"items": {"type": "string"}, "title": "Roles", "type": "array"}, "is_github_user": {"title": "Is Github User", "type": "boolean"}}, "required": ["id", "username", "super", "roles", "is_github_user"], "title": "UserInfoRsp", "type": "object"}, "ModifyCurrentUser": {"properties": {"new_password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "New Password"}, "password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Password"}}, "title": "ModifyCurrentUser", "type": "object"}, "SuccRsp_NoneType_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"title": "Data", "type": "null"}}, "required": ["status", "data"], "title": "SuccRsp[NoneType]", "type": "object"}, "GetTokensRsp": {"properties": {"id": {"title": "Id", "type": "integer"}, "token": {"title": "Token", "type": "string"}, "token_name": {"title": "Token Name", "type": "string"}, "token_desc": {"title": "Token Desc", "type": "string"}, "token_expire": {"examples": ["2025-02-11T23:56:09.473Z"], "format": "date-time", "title": "Token Expire", "type": "string"}}, "required": ["id", "token", "token_name", "token_desc", "token_expire"], "title": "GetTokensRsp", "type": "object"}, "SuccRsp_list_GetTokensRsp__": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"items": {"$ref": "#/components/schemas/GetTokensRsp"}, "title": "Data", "type": "array"}}, "required": ["status", "data"], "title": "SuccRsp[list[GetTokensRsp]]", "type": "object"}, "SuccRsp_GetTokensRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/GetTokensRsp"}}, "required": ["status", "data"], "title": "SuccRsp[GetTokensRsp]", "type": "object"}, "CreateToken": {"properties": {"name": {"default": "", "title": "Name", "type": "string"}, "desc": {"default": "", "title": "Desc", "type": "string"}, "expire": {"default": "2025-05-13T03:04:03.191738Z", "format": "date-time", "title": "Expire", "type": "string"}}, "title": "CreateToken", "type": "object"}, "ModifyToken": {"properties": {"name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Desc"}, "expire": {"anyOf": [{"format": "date-time", "type": "string"}, {"type": "null"}], "title": "Expire"}}, "title": "ModifyToken", "type": "object"}, "SuccRsp_Union_UserInfoRsp__GetTokensRsp__": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"anyOf": [{"$ref": "#/components/schemas/UserInfoRsp"}, {"$ref": "#/components/schemas/GetTokensRsp"}], "title": "Data"}}, "required": ["status", "data"], "title": "SuccRsp[Union[UserInfoRsp, GetTokensRsp]]", "type": "object"}, "ModifyCurrentUserNew": {"properties": {"type": {"const": "update_user", "default": "update_user", "title": "Type", "type": "string"}, "new_password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "New Password"}, "password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Password"}}, "title": "ModifyCurrentUserNew", "type": "object"}, "ModifyTokenNew": {"properties": {"type": {"const": "update_token", "default": "update_token", "title": "Type", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Desc"}, "expire": {"anyOf": [{"format": "date-time", "type": "string"}, {"type": "null"}], "title": "Expire"}}, "required": ["id"], "title": "ModifyTokenNew", "type": "object"}, "UpdateBase": {"properties": {"payload": {"discriminator": {"mapping": {"update_token": "#/components/schemas/ModifyTokenNew", "update_user": "#/components/schemas/ModifyCurrentUserNew"}, "propertyName": "type"}, "oneOf": [{"$ref": "#/components/schemas/ModifyCurrentUserNew"}, {"$ref": "#/components/schemas/ModifyTokenNew"}], "title": "Payload"}}, "required": ["payload"], "title": "UpdateBase", "type": "object"}, "SuccRsp_ViewModelsRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ViewModelsRsp"}}, "required": ["status", "data"], "title": "SuccRsp[ViewModelsRsp]", "type": "object"}, "ViewModelShareInfo": {"properties": {"id": {"title": "Id", "type": "integer"}, "public": {"title": "Public", "type": "boolean"}}, "required": ["id", "public"], "title": "ViewModelShareInfo", "type": "object"}, "ViewModelsRsp": {"properties": {"object_type": {"const": "model", "title": "Object Type", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "short_id": {"title": "Short Id", "type": "string"}, "name": {"title": "Name", "type": "string"}, "env": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Env"}, "share_info": {"anyOf": [{"items": {"$ref": "#/components/schemas/ViewModelShareInfo"}, "type": "array"}, {"type": "null"}], "title": "Share Info"}, "content": {"title": "Content"}}, "required": ["object_type", "id", "short_id", "name", "env"], "title": "ViewModelsRsp", "type": "object"}, "GetConfigRsp": {"properties": {"run_model_url": {"title": "Run Model Url", "type": "string"}}, "required": ["run_model_url"], "title": "GetConfigRsp", "type": "object"}, "SuccRsp_GetConfigRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/GetConfigRsp"}}, "required": ["status", "data"], "title": "SuccRsp[GetConfigRsp]", "type": "object"}, "CreateModelShareRsp": {"properties": {"id": {"title": "Id", "type": "integer"}, "model_id": {"title": "Model Id", "type": "string"}, "model_name": {"title": "Model Name", "type": "string"}, "password": {"title": "Password", "type": "string"}, "created_at": {"format": "date-time", "title": "Created At", "type": "string"}, "from_user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "From User"}, "to_user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "To User"}}, "required": ["id", "model_id", "model_name", "password", "created_at"], "title": "CreateModelShareRsp", "type": "object"}, "SuccRsp_CreateModelShareRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/CreateModelShareRsp"}}, "required": ["status", "data"], "title": "SuccRsp[CreateModelShareRsp]", "type": "object"}, "CreateModelShare": {"properties": {"password": {"default": "", "title": "Password", "type": "string"}, "target_user": {"default": "", "title": "Target User", "type": "string"}}, "title": "CreateModelShare", "type": "object"}, "DeleteModelShare": {"properties": {"share_id": {"description": "\"-\"separated share ids", "title": "Share Id", "type": "string"}}, "required": ["share_id"], "title": "DeleteModelShare", "type": "object"}, "GetModelShareRsp": {"properties": {"require_password": {"title": "Require Password", "type": "boolean"}}, "required": ["require_password"], "title": "GetModelShareRsp", "type": "object"}, "SuccRsp_GetModelShareRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/GetModelShareRsp"}}, "required": ["status", "data"], "title": "SuccRsp[GetModelShareRsp]", "type": "object"}, "ListGitHubRepository": {"properties": {"page_no": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "page_size": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}}, "title": "ListGitHubRepository", "type": "object"}, "ListRepositoryRsp": {"properties": {"repos": {"items": {"type": "string"}, "title": "Repos", "type": "array"}, "gists": {"items": {"$ref": "#/components/schemas/_GistRsp"}, "title": "Gists", "type": "array"}}, "required": ["repos", "gists"], "title": "ListRepositoryRsp", "type": "object"}, "SuccRsp_ListRepositoryRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ListRepositoryRsp"}}, "required": ["status", "data"], "title": "SuccRsp[ListRepositoryRsp]", "type": "object"}, "_GistRsp": {"properties": {"id": {"title": "Id", "type": "string"}, "description": {"title": "Description", "type": "string"}}, "required": ["id", "description"], "title": "_GistRsp", "type": "object"}, "ListBranchRsp": {"properties": {"branches": {"items": {"type": "string"}, "title": "Branches", "type": "array"}}, "required": ["branches"], "title": "ListBranchRsp", "type": "object"}, "SuccRsp_ListBranchRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ListBranchRsp"}}, "required": ["status", "data"], "title": "SuccRsp[ListBranchRsp]", "type": "object"}, "SuccRsp_ViewCloudwatchLogsRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ViewCloudwatchLogsRsp"}}, "required": ["status", "data"], "title": "SuccRsp[ViewCloudwatchLogsRsp]", "type": "object"}, "ViewCloudwatchLogsRsp": {"properties": {"logs": {"items": {"maxItems": 2, "minItems": 2, "prefixItems": [{"type": "integer"}, {"type": "string"}], "type": "array"}, "title": "Logs", "type": "array"}}, "required": ["logs"], "title": "ViewCloudwatchLogsRsp", "type": "object"}, "GetSampleDataRsp": {"properties": {"url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Url"}, "progress": {"enum": ["generating", "done"], "title": "Progress", "type": "string"}, "message": {"default": "", "title": "Message", "type": "string"}}, "required": ["progress"], "title": "GetSampleDataRsp", "type": "object"}, "SuccRsp_GetSampleDataRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/GetSampleDataRsp"}}, "required": ["status", "data"], "title": "SuccRsp[GetSampleDataRsp]", "type": "object"}, "SuccRsp_Any_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"title": "Data"}}, "required": ["status", "data"], "title": "SuccRsp[Any]", "type": "object"}, "GetNotificationReq": {"properties": {"page_no": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "page_size": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}, "status": {"description": "Filter the notification message by read status", "enum": ["all", "read", "unread"], "title": "Status", "type": "string"}}, "required": ["status"], "title": "GetNotificationReq", "type": "object"}, "ListingRspData_NotificationDict_": {"properties": {"total": {"title": "Total", "type": "integer"}, "page": {"title": "Page", "type": "integer"}, "count_per_page": {"title": "Count Per Page", "type": "integer"}, "objects": {"items": {"$ref": "#/components/schemas/NotificationDict"}, "title": "Objects", "type": "array"}}, "required": ["total", "page", "count_per_page", "objects"], "title": "ListingRspData[NotificationDict]", "type": "object"}, "NotificationDict": {"properties": {"id": {"title": "Id", "type": "integer"}, "event": {"title": "Event", "type": "string"}, "title": {"title": "Title", "type": "string"}, "message": {"title": "Message", "type": "string"}, "msg_object": {"title": "Msg Object", "type": "string"}, "msg_verb": {"title": "Msg Verb", "type": "string"}, "created_at": {"title": "Created At", "type": "string"}, "read_at": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Read At"}}, "required": ["id", "event", "title", "message", "msg_object", "msg_verb", "created_at", "read_at"], "title": "NotificationDict", "type": "object"}, "SuccRsp_ListingRspData_NotificationDict__": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ListingRspData_NotificationDict_"}}, "required": ["status", "data"], "title": "SuccRsp[ListingRspData[NotificationDict]]", "type": "object"}, "MarkNotificationReadReq": {"properties": {"notification_ids": {"items": {"type": "integer"}, "title": "Notification Ids", "type": "array"}, "status": {"description": "the target status to be set", "enum": ["read", "unread"], "title": "Status", "type": "string"}}, "required": ["status"], "title": "MarkNotificationReadReq", "type": "object"}, "ListObjectTmp": {"properties": {"payload": {"$ref": "#/components/schemas/_ListObjectTmp"}}, "required": ["payload"], "title": "ListObjectTmp", "type": "object"}, "_ListObjectTmp": {"properties": {"page_no": {"default": 1, "description": "page number", "exclusiveMinimum": 0, "title": "Page No", "type": "integer"}, "page_size": {"default": 100, "description": "page size", "exclusiveMinimum": 0, "maximum": 1000, "title": "Page Size", "type": "integer"}, "object_type": {"enum": ["model", "experiment", "share"], "title": "Object Type", "type": "string"}, "with_share_info": {"default": false, "description": "Whether to return the related share info", "title": "With Share Info", "type": "boolean"}, "shared_by_me": {"default": false, "description": "Filter objects shared by the current user", "title": "Shared By Me", "type": "boolean"}, "shared_with_me": {"default": false, "description": "Filter objects shared with the current user", "title": "Shared With Me", "type": "boolean"}, "model_ids": {"items": {"type": "string"}, "title": "Model Ids", "type": "array"}, "status": {"default": "", "enum": ["NEW", "RUN", "FIN", "ERR", ""], "title": "Status", "type": "string"}, "run_on": {"default": "", "enum": ["Lambda", "Fargate", "Local", ""], "title": "Run On", "type": "string"}, "has_model": {"default": "", "enum": ["true", "false", ""], "title": "Has Model", "type": "string"}}, "required": ["object_type"], "title": "_ListObjectTmp", "type": "object"}, "ListExperimentRsp": {"properties": {"short_id": {"title": "Short Id", "type": "string"}, "name": {"title": "Name", "type": "string"}, "model_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Model Id"}, "status": {"title": "Status", "type": "string"}, "meta": {"anyOf": [{"$ref": "#/components/schemas/_MetaModel"}, {"type": "null"}]}, "n_chains": {"title": "N Chains", "type": "integer"}, "n_variables": {"title": "N Variables", "type": "integer"}, "n_samples": {"title": "N Samples", "type": "integer"}, "sample_update_time": {"format": "date-time", "title": "Sample Update Time", "type": "string"}, "run_on": {"title": "Run On", "type": "string"}, "share_info": {"anyOf": [{"items": {"$ref": "#/components/schemas/_ShareInfoModel"}, "type": "array"}, {"type": "null"}], "title": "Share Info"}, "model_name": {"title": "Model Name", "type": "string"}}, "required": ["short_id", "name", "status", "n_chains", "n_variables", "n_samples", "sample_update_time", "run_on", "model_name"], "title": "ListExperimentRsp", "type": "object"}, "ListModelsRspItem": {"properties": {"id": {"title": "Id", "type": "integer"}, "short_id": {"title": "Short Id", "type": "string"}, "name": {"title": "Name", "type": "string"}, "env": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Env"}, "share_info": {"anyOf": [{"items": {"$ref": "#/components/schemas/ShareInfoModel"}, "type": "array"}, {"type": "null"}], "title": "Share Info"}, "content": {"title": "Content"}, "meta": {"$ref": "#/components/schemas/_ModelMetaInRsp"}}, "required": ["id", "short_id", "name", "env", "meta"], "title": "ListModelsRspItem", "type": "object"}, "ListingRspData_Union_ListExperimentRsp__ListModelsRspItem__": {"properties": {"total": {"title": "Total", "type": "integer"}, "page": {"title": "Page", "type": "integer"}, "count_per_page": {"title": "Count Per Page", "type": "integer"}, "objects": {"items": {"anyOf": [{"$ref": "#/components/schemas/ListExperimentRsp"}, {"$ref": "#/components/schemas/ListModelsRspItem"}]}, "title": "Objects", "type": "array"}}, "required": ["total", "page", "count_per_page", "objects"], "title": "ListingRspData[Union[ListExperimentRsp, ListModelsRspItem]]", "type": "object"}, "ShareInfoModel": {"properties": {"id": {"title": "Id", "type": "integer"}, "password": {"title": "Password", "type": "string"}, "user_id": {"title": "User Id", "type": "string"}, "to_user_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "To User Id"}}, "required": ["id", "password", "user_id"], "title": "ShareInfoModel", "type": "object"}, "SuccRsp_ListingRspData_Union_ListExperimentRsp__ListModelsRspItem___": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/ListingRspData_Union_ListExperimentRsp__ListModelsRspItem__"}}, "required": ["status", "data"], "title": "SuccRsp[ListingRspData[Union[ListExperimentRsp, ListModelsRspItem]]]", "type": "object"}, "_MetaModel": {"properties": {"action": {"default": "", "title": "Action", "type": "string"}, "iteration_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Iteration Count"}}, "title": "_MetaModel", "type": "object"}, "_ModelMetaInRsp": {"properties": {"github": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github"}, "commit_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Id"}}, "title": "_ModelMetaInRsp", "type": "object"}, "_ShareInfoModel": {"properties": {"id": {"title": "Id", "type": "integer"}, "password": {"title": "Password", "type": "string"}, "user_id": {"title": "User Id", "type": "string"}, "short_id": {"title": "Short Id", "type": "string"}, "to_user_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "To User Id"}}, "required": ["id", "password", "user_id", "short_id"], "title": "_ShareInfoModel", "type": "object"}, "CreateExperimentShareRsp": {"properties": {"id": {"title": "Id", "type": "integer"}, "user_id": {"title": "User Id", "type": "integer"}, "short_id": {"title": "Short Id", "type": "string"}, "experiment_id": {"title": "Experiment Id", "type": "string"}, "experiment_name": {"title": "Experiment Name", "type": "string"}, "password": {"title": "Password", "type": "string"}, "created_at": {"format": "date-time", "title": "Created At", "type": "string"}, "from_user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "From User"}, "to_user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "To User"}}, "required": ["id", "user_id", "short_id", "experiment_id", "experiment_name", "password", "created_at"], "title": "CreateExperimentShareRsp", "type": "object"}, "ExperimentRsp": {"properties": {"object_type": {"const": "experiment", "title": "Object Type", "type": "string"}, "short_id": {"default": "", "title": "Short Id", "type": "string"}, "name": {"default": "", "title": "Name", "type": "string"}, "model_id": {"default": "", "title": "Model Id", "type": "string"}, "status": {"default": "", "title": "Status", "type": "string"}, "meta": {"title": "Meta"}, "n_chains": {"default": 0, "title": "N Chains", "type": "integer"}, "n_variables": {"default": 0, "title": "N Variables", "type": "integer"}, "n_samples": {"default": 0, "title": "N Samples", "type": "integer"}, "sample_update_time": {"default": "", "format": "date-time", "title": "Sample Update Time", "type": "string"}, "run_on": {"default": "", "title": "Run On", "type": "string"}, "input": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Input"}, "output": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Output"}, "share_info": {"anyOf": [{"items": {"$ref": "#/components/schemas/_ShareInfoModel"}, "type": "array"}, {"type": "null"}], "title": "Share Info"}, "model_name": {"title": "Model Name", "type": "string"}}, "required": ["object_type", "model_name"], "title": "ExperimentRsp", "type": "object"}, "SuccRsp_Union_ExperimentRsp__ListModelsRspItem__CreateExperimentShareRsp__": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"anyOf": [{"$ref": "#/components/schemas/ExperimentRsp"}, {"$ref": "#/components/schemas/ListModelsRspItem"}, {"$ref": "#/components/schemas/CreateExperimentShareRsp"}], "title": "Data"}}, "required": ["status", "data"], "title": "SuccRsp[Union[ExperimentRsp, ListModelsRspItem, CreateExperimentShareRsp]]", "type": "object"}, "CreateExperiment": {"properties": {"object_type": {"const": "experiment", "title": "Object Type", "type": "string"}, "model_id": {"title": "Model Id", "type": "string"}, "xp_meta": {"title": "Xp Meta"}, "meta": {"title": "Meta"}, "name": {"default": "", "title": "Name", "type": "string"}}, "required": ["object_type", "model_id"], "title": "CreateExperiment", "type": "object"}, "CreateExperimentShare": {"properties": {"object_type": {"const": "share", "title": "Object Type", "type": "string"}, "objid": {"title": "Objid", "type": "string"}, "password": {"default": "", "title": "Password", "type": "string"}, "target_user": {"default": "", "title": "Target User", "type": "string"}}, "required": ["object_type", "objid"], "title": "CreateExperimentShare", "type": "object"}, "CreateModel": {"properties": {"object_type": {"const": "model", "title": "Object Type", "type": "string"}, "repo": {"default": "", "description": "repo in the form of repo_owner/repo_name or gist id in case of importing from gist", "title": "Repo", "type": "string"}, "branch": {"default": "", "description": "branch name or gist description in case of importing from gist", "title": "Branch", "type": "string"}, "type": {"default": "local", "description": "repo or gist", "enum": ["repo", "gist", "local"], "title": "Type", "type": "string"}, "model_name": {"default": "", "description": "[deprecated] model name", "title": "Model Name", "type": "string"}, "env": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Env"}, "name": {"default": "", "description": "model name", "title": "Name", "type": "string"}, "content": {"anyOf": [{"$ref": "#/components/schemas/ModelContent"}, {"type": "null"}]}, "is_demo": {"default": false, "title": "Is Demo", "type": "boolean"}}, "required": ["object_type"], "title": "CreateModel", "type": "object"}, "CreateObjectReq": {"properties": {"payload": {"discriminator": {"mapping": {"experiment": "#/components/schemas/CreateExperiment", "model": "#/components/schemas/CreateModel", "share": "#/components/schemas/CreateExperimentShare"}, "propertyName": "object_type"}, "oneOf": [{"$ref": "#/components/schemas/CreateModel"}, {"$ref": "#/components/schemas/CreateExperiment"}, {"$ref": "#/components/schemas/CreateExperimentShare"}], "title": "Payload"}}, "required": ["payload"], "title": "CreateObjectReq", "type": "object"}, "ModelContent": {"properties": {"meta": {"allOf": [{"$ref": "#/components/schemas/ModelMeta"}]}, "tree": {"items": {"$ref": "#/components/schemas/ModelTreeNode"}, "title": "Tree", "type": "array"}}, "title": "ModelContent", "type": "object"}, "ModelMeta": {"properties": {"project_file": {"default": "Project.toml", "title": "Project File", "type": "string"}, "entrance_file": {"default": "main.jl", "title": "Entrance File", "type": "string"}, "entrance_func": {"default": "model", "title": "Entrance Func", "type": "string"}, "manifest": {"default": "Manifest.toml", "title": "Manifest", "type": "string"}}, "title": "ModelMeta", "type": "object"}, "ModelTreeNode": {"properties": {"name": {"title": "Name", "type": "string"}, "type": {"enum": ["file", "folder"], "title": "Type", "type": "string"}, "content": {"default": "", "title": "Content", "type": "string"}, "children": {"default": [], "items": {"$ref": "#/components/schemas/ModelTreeNode"}, "title": "Children", "type": "array"}}, "required": ["name", "type"], "title": "ModelTreeNode", "type": "object"}, "DeleteObject": {"properties": {"objids": {"items": {"type": "string"}, "title": "Objids", "type": "array"}}, "required": ["objids"], "title": "DeleteObject", "type": "object"}, "ViewObject": {"properties": {"object_type": {"enum": ["model", "experiment", "share"], "title": "Object Type", "type": "string"}, "share_id": {"default": "", "description": "\n                Only appicable to object_type == model or object_type == experiment\n                If this field is empty, returns the latest version of the objects.\n                otherwise returns the specified share snapshot", "title": "Share Id", "type": "string"}}, "required": ["object_type"], "title": "ViewObject", "type": "object"}, "ViewObjectTmp": {"properties": {"payload": {"$ref": "#/components/schemas/ViewObject"}}, "required": ["payload"], "title": "ViewObjectTmp", "type": "object"}, "SuccRsp_Annotated_Union_ExperimentRsp__ViewModelsRsp__ViewExperimentShareRsp___FieldInfo_annotation_NoneType__required_True__discriminator__object_type____": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"discriminator": {"mapping": {"experiment": "#/components/schemas/ExperimentRsp", "model": "#/components/schemas/ViewModelsRsp", "share": "#/components/schemas/ViewExperimentShareRsp"}, "propertyName": "object_type"}, "oneOf": [{"$ref": "#/components/schemas/ExperimentRsp"}, {"$ref": "#/components/schemas/ViewModelsRsp"}, {"$ref": "#/components/schemas/ViewExperimentShareRsp"}], "title": "Data"}}, "required": ["status", "data"], "title": "SuccRsp[Annotated[Union[ExperimentRsp, ViewModelsRsp, ViewExperimentShareRsp], FieldInfo(annotation=NoneType, required=True, discriminator='object_type')]]", "type": "object"}, "ViewExperimentShareRsp": {"properties": {"object_type": {"const": "share", "title": "Object Type", "type": "string"}, "require_password": {"title": "Require Password", "type": "boolean"}}, "required": ["object_type", "require_password"], "title": "ViewExperimentShareRsp", "type": "object"}, "SuccRsp_Union_ExperimentRsp__ViewModelsRsp__": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"anyOf": [{"$ref": "#/components/schemas/ExperimentRsp"}, {"$ref": "#/components/schemas/ViewModelsRsp"}], "title": "Data"}}, "required": ["status", "data"], "title": "SuccRsp[Union[ExperimentRsp, ViewModelsRsp]]", "type": "object"}, "UpdateExperiment": {"properties": {"object_type": {"const": "experiment", "title": "Object Type", "type": "string"}, "action": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Action"}, "meta": {"additionalProperties": true, "title": "Meta", "type": "object"}, "name": {"anyOf": [{"maxLength": 600, "type": "string"}, {"type": "null"}], "title": "Name"}, "version": {"anyOf": [{"maxLength": 32, "type": "string"}, {"type": "null"}], "title": "Version"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "status": {"anyOf": [{"maxLength": 64, "type": "string"}, {"type": "null"}], "title": "Status"}}, "required": ["object_type"], "title": "UpdateExperiment", "type": "object"}, "UpdateModel": {"properties": {"content": {"anyOf": [{"$ref": "#/components/schemas/ModelContent"}, {"type": "null"}]}, "name": {"anyOf": [{"maxLength": 600, "type": "string"}, {"type": "null"}], "title": "Name"}, "version": {"anyOf": [{"maxLength": 32, "type": "string"}, {"type": "null"}], "title": "Version"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "status": {"anyOf": [{"maxLength": 64, "type": "string"}, {"type": "null"}], "title": "Status"}, "object_type": {"const": "model", "title": "Object Type", "type": "string"}}, "required": ["object_type"], "title": "UpdateModel", "type": "object"}, "UpdateObject": {"properties": {"payload": {"discriminator": {"mapping": {"experiment": "#/components/schemas/UpdateExperiment", "model": "#/components/schemas/UpdateModel"}, "propertyName": "object_type"}, "oneOf": [{"$ref": "#/components/schemas/UpdateModel"}, {"$ref": "#/components/schemas/UpdateExperiment"}], "title": "Payload"}}, "required": ["payload"], "title": "UpdateObject", "type": "object"}, "GetExperimentShareRsp": {"properties": {"require_password": {"title": "Require Password", "type": "boolean"}}, "required": ["require_password"], "title": "GetExperimentShareRsp", "type": "object"}, "SuccRsp_GetExperimentShareRsp_": {"properties": {"status": {"const": "ok", "title": "Status", "type": "string"}, "data": {"$ref": "#/components/schemas/GetExperimentShareRsp"}}, "required": ["status", "data"], "title": "SuccRsp[GetExperimentShareRsp]", "type": "object"}}, "securitySchemes": {"GlobalAuth": {"type": "http", "scheme": "bearer"}, "SharingAuth": {"type": "apiKey", "in": "header", "name": "X-Share-Password"}}}, "servers": [{"url": "https://api.coinfer.ai", "description": "The production environment"}, {"url": "https://dev.coinfer.ai", "description": "The development environment"}], "tags": [{"name": "Object", "description": "APIs related to object CRUD operations."}, {"name": "Model", "description": "APIs related to models."}, {"name": "Experiment", "description": "APIs related to experiments."}, {"name": "Share", "description": "APIs related to model/experiment sharing."}, {"name": "Notification", "description": "APIs related to notification."}, {"name": "Authorization", "description": "APIs related to user, token, login, etc.\n\nNormally API's in this group should not be used. You should get API token from our website and then use the token to call other APIs."}]}